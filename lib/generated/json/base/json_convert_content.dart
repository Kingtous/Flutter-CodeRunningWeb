// ignore_for_file: non_constant_identifier_names
// ignore_for_file: camel_case_types
// ignore_for_file: prefer_single_quotes

// This file is automatically generated. DO NOT EDIT, all your changes would be lost.
import 'package:code_running_front/business/user/models/request/req_login_entity.dart';
import 'package:code_running_front/business/user/models/request/req_register_entity.dart';
import 'package:code_running_front/business/user/models/response/resp_login_entity.dart';
import 'package:code_running_front/business/user/models/response/resp_register_entity.dart';
import 'package:code_running_front/generated/json/req_login_entity_helper.dart';
import 'package:code_running_front/generated/json/req_register_entity_helper.dart';
import 'package:code_running_front/generated/json/resp_login_entity_helper.dart';
import 'package:code_running_front/generated/json/resp_register_entity_helper.dart';

class JsonConvert<T> {
  T fromJson(Map<String, dynamic> json) {
    return _getFromJson<T>(runtimeType, this, json);
  }

  Map<String, dynamic> toJson() {
    return _getToJson<T>(runtimeType, this);
  }

  static _getFromJson<T>(Type type, data, json) {
    switch (type) {
      case RespRegisterEntity:
        return respRegisterEntityFromJson(
            data as RespRegisterEntity, json) as T;
      case RespRegisterData:
        return respRegisterDataFromJson(data as RespRegisterData, json) as T;
      case ReqRegisterEntity:
        return reqRegisterEntityFromJson(data as ReqRegisterEntity, json) as T;
      case ReqLoginEntity:
        return reqLoginEntityFromJson(data as ReqLoginEntity, json) as T;
      case RespLoginEntity:
        return respLoginEntityFromJson(data as RespLoginEntity, json) as T;
      case RespLoginData:
        return respLoginDataFromJson(data as RespLoginData, json) as T;
    }
    return data as T;
  }

  static _getToJson<T>(Type type, data) {
    switch (type) {
      case RespRegisterEntity:
        return respRegisterEntityToJson(data as RespRegisterEntity);
      case RespRegisterData:
        return respRegisterDataToJson(data as RespRegisterData);
      case ReqRegisterEntity:
        return reqRegisterEntityToJson(data as ReqRegisterEntity);
      case ReqLoginEntity:
        return reqLoginEntityToJson(data as ReqLoginEntity);
      case RespLoginEntity:
        return respLoginEntityToJson(data as RespLoginEntity);
      case RespLoginData:
        return respLoginDataToJson(data as RespLoginData);
    }
    return data as T;
  }

  //Go back to a single instance by type
  static _fromJsonSingle(String type, json) {
    switch (type) {
      case 'RespRegisterEntity':
        return RespRegisterEntity().fromJson(json);
      case 'RespRegisterData':
        return RespRegisterData().fromJson(json);
      case 'ReqRegisterEntity':
        return ReqRegisterEntity().fromJson(json);
      case 'ReqLoginEntity':
        return ReqLoginEntity().fromJson(json);
      case 'RespLoginEntity':
        return RespLoginEntity().fromJson(json);
      case 'RespLoginData':
        return RespLoginData().fromJson(json);
    }
    return null;
  }

  //empty list is returned by type
  static _getListFromType(String type) {
    switch (type) {
      case 'RespRegisterEntity':
        return List<RespRegisterEntity>();
      case 'RespRegisterData':
        return List<RespRegisterData>();
      case 'ReqRegisterEntity':
        return List<ReqRegisterEntity>();
      case 'ReqLoginEntity':
        return List<ReqLoginEntity>();
      case 'RespLoginEntity':
        return List<RespLoginEntity>();
      case 'RespLoginData':
        return List<RespLoginData>();
    }
    return null;
  }

  static M fromJsonAsT<M>(json) {
    String type = M.toString();
    if (json is List && type.contains("List<")) {
      String itemType = type.substring(5, type.length - 1);
      List tempList = _getListFromType(itemType);
      json.forEach((itemJson) {
        tempList
            .add(_fromJsonSingle(type.substring(5, type.length - 1), itemJson));
      });
      return tempList as M;
    } else {
      return _fromJsonSingle(M.toString(), json) as M;
    }
  }
}